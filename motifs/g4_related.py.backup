"""
Category 8: G4-related Detection Module
======================================

This module implements detection algorithms for all G-quadruplex related structures
including canonical G4, variants, and G-triplex structures.

Scientific Basis:
- G-quadruplexes are four-stranded structures formed by guanine-rich sequences
- Various topologies: canonical, relaxed, bulged, bipartite, multimeric, imperfect
- G-triplex structures are three-stranded intermediates

References:
- Bedrat et al. (2016) NAR (G4Hunter algorithm)
- Hänsel-Hertsch et al. (2017) Nat Rev Mol Cell Biol

Author: Dr. Venkata Rajesh Yella
Updated: 2024
"""

import re

# Math utilities - optimized for performance
from math import log2, sqrt
def mean(values): return sum(values) / len(values) if values else 0
from .shared_utils import (wrap, calculate_conservation_score, overlapping_finditer,
                          find_g4_unified, create_scoring_array, g4_position_score,
                          detect_regions_from_scores, format_detected_regions)

# G4 formation category classification - optimized
def get_g4_formation_category(g4hunter_score):
    """Categorize G4 formation potential based on experimental thresholds."""
    if g4hunter_score >= 1.5:
        return {"category": "High Formation Potential", "threshold": "≥ 1.5", 
                "experimental_evidence": "Strong", "formation_probability": "85-95%",
                "stability": "High", "color": "#d32f2f"}
    elif g4hunter_score >= 1.0:
        return {"category": "Moderate Formation Potential", "threshold": "1.0 - 1.5",
                "experimental_evidence": "Moderate", "formation_probability": "60-85%", 
                "stability": "Moderate", "color": "#f57c00"}
    elif g4hunter_score < 1.0:
        return {"category": "Low Formation Potential", "threshold": "< 1.0",
                "experimental_evidence": "Weak/Variable", "formation_probability": "10-60%",
                "stability": "Low", "color": "#388e3c"}
    else:
        return {"category": "Unknown", "threshold": "N/A", "experimental_evidence": "Unknown",
                "formation_probability": "Unknown", "stability": "Unknown", "color": "#666666"}

# G4Hunter scoring algorithm - optimized  
def g4hunter_score(seq):
    """G4Hunter scoring: assign scores based on G/C runs and average."""
    seq, scores, i = seq.upper(), [], 0
    while i < len(seq):
        if seq[i] == 'G':
            run = 1
            while i + run < len(seq) and seq[i + run] == 'G': run += 1
            s = min(run, 4); scores += [s] * run; i += run
        elif seq[i] == 'C':
            run = 1
            while i + run < len(seq) and seq[i + run] == 'C': run += 1
            s = -min(run, 4); scores += [s] * run; i += run
        else:
            scores.append(0); i += 1
    return sum(scores) / len(scores) if scores else 0.0

# G4 structural factor calculation - optimized
def g4_structural_factor(motif_seq, motif_type="canonical"):
    """Calculate structural factor based on G-run architecture and loop lengths."""
    import numpy as np
    g_runs = re.findall(r"G{3,}", motif_seq)
    num_g_runs = len(g_runs)
    
    # Base structural factor with G-run count bonus
    structural_factor = 1.0 + (0.1 * max(0, num_g_runs - 4))
    
    # Loop length analysis for optimal stability
    if num_g_runs >= 2:
        pattern = r"G{3,}([ATGC]*?)G{3,}"
        loops = re.findall(pattern, motif_seq)
        if loops:
            avg_loop_len = np.mean([len(loop) for loop in loops])
            # Optimal loop lengths (1-7 nt) get bonus, longer loops get penalty
            structural_factor += 0.1 if avg_loop_len <= 7 else -0.05 * (avg_loop_len - 7)
    
    # Motif-type specific adjustments
    type_adjustments = {"bipartite": 0.2, "multimeric": 0.15, "bulged": -0.1, "relaxed": -0.05}
    structural_factor += type_adjustments.get(motif_type, 0)
    
    return max(0.1, structural_factor)

# G4 detection functions - using unified framework
def find_gquadruplex(seq):
    """Find canonical G-quadruplex structures using unified framework."""
    return find_g4_unified(
        seq, 
        motif_subtype="Canonical G4",
        pattern=r"G{3,}\w{1,7}G{3,}\w{1,7}G{3,}\w{1,7}G{3,}",
        g4_threshold=1.0,
        min_length=12
    )

def find_relaxed_gquadruplex(seq):
    """Find relaxed G-quadruplex structures with longer loops using unified framework."""
    return find_g4_unified(
        seq,
        motif_subtype="Relaxed G4", 
        pattern=r"G{3,}\w{1,12}G{3,}\w{1,12}G{3,}\w{1,12}G{3,}",
        g4_threshold=0.8,
        min_length=12
    )

def find_bulged_gquadruplex(seq):
    """Find bulged G-quadruplex structures using unified framework."""
    return find_g4_unified(
        seq,
        motif_subtype="Bulged G4",
        pattern=r"G{2,}\w{1,3}G{1,}\w{1,7}G{3,}\w{1,7}G{3,}\w{1,7}G{3,}",
        g4_threshold=0.9,
        min_length=12
    )
                "Start": m.start() + 1,
                "End": m.end(),
                "Length": len(motif_seq),
                "Sequence": wrap(motif_seq),
                "Score": float(g4_score * len(motif_seq)),
                "G4Hunter_Score": float(g4_score),
                "Conservation_Score": float(conservation_result["enrichment_score"]),
                "Arms/Repeat Unit/Copies": "",
                "Spacer": ""
            })
    return results

def find_imperfect_gquadruplex(seq):
    """Find imperfect G-quadruplex structures."""
    results = []
    pattern = r"G{2,}\w{1,12}G{2,}\w{1,12}G{2,}\w{1,12}G{2,}"
    for m in overlapping_finditer(pattern, seq):
        motif_seq = m.group(0)
        g4_score = g4hunter_score(motif_seq)
        if g4_score >= 0.7:
            conservation_result = calculate_conservation_score(motif_seq, "Imperfect G4")
            
            results.append({
                "Sequence Name": "",
                "Class": "Imperfect G4",
                "Subtype": "G4_Imperfect",
                "Start": m.start() + 1,
                "End": m.end(),
                "Length": len(motif_seq),
                "Sequence": wrap(motif_seq),
                "Score": float(g4_score * len(motif_seq)),
                "G4Hunter_Score": float(g4_score),
                "Conservation_Score": float(conservation_result["enrichment_score"]),
                "Arms/Repeat Unit/Copies": "",
                "Spacer": ""
            })
    return results

def find_multimeric_gquadruplex(seq):
    """Find multimeric G-quadruplex structures."""
    results = []
    pattern = r"(G{3,}\w{1,12}){4,}"
    for m in overlapping_finditer(pattern, seq):
        motif_seq = m.group(0)
        g4_score = g4hunter_score(motif_seq)
        if g4_score >= 1.2:
            conservation_result = calculate_conservation_score(motif_seq, "Multimeric G4")
            
            results.append({
                "Sequence Name": "",
                "Class": "Multimeric G4",
                "Subtype": "G4_Multimeric",
                "Start": m.start() + 1,
                "End": m.end(),
                "Length": len(motif_seq),
                "Sequence": wrap(motif_seq),
                "Score": float(g4_score * len(motif_seq)),
                "G4Hunter_Score": float(g4_score),
                "Conservation_Score": float(conservation_result["enrichment_score"]),
                "Arms/Repeat Unit/Copies": "",
                "Spacer": ""
            })
    return results

def find_bipartite_gquadruplex(seq):
    """Find bipartite G-quadruplex structures."""
    results = []
    pattern = r"G{3,}\w{1,7}G{3,}\w{20,50}G{3,}\w{1,7}G{3,}"
    for m in overlapping_finditer(pattern, seq):
        motif_seq = m.group(0)
        g4_score = g4hunter_score(motif_seq)
        if g4_score >= 0.8:
            conservation_result = calculate_conservation_score(motif_seq, "Bipartite G4")
            
            results.append({
                "Sequence Name": "",
                "Class": "G-Quadruplex Family",
                "Subtype": "Bipartite G4",
                "Start": m.start() + 1,
                "End": m.end(),
                "Length": len(motif_seq),
                "Sequence": wrap(motif_seq),
                "Score": float(g4_score * len(motif_seq)),
                "G4Hunter_Score": float(g4_score),
                "Conservation_Score": float(conservation_result["enrichment_score"]),
                "Arms/Repeat Unit/Copies": "",
                "Spacer": ""
            })
    return results

def find_gtriplex(seq):
    """Find G-triplex structures."""
    results = []
    pattern = r"G{3,}\w{1,15}G{3,}\w{1,15}G{3,}"
    for m in overlapping_finditer(pattern, seq):
        motif_seq = m.group(0)
        g_runs = re.findall(r"G{3,}", motif_seq)
        if len(g_runs) >= 3:
            g_content = motif_seq.count('G') / len(motif_seq)
            score = len(motif_seq) * g_content * len(g_runs)
            
            conservation_result = calculate_conservation_score(motif_seq, "G-Triplex")
            
            results.append({
                "Sequence Name": "",
                "Class": "G-Quadruplex Family",
                "Subtype": "G-Triplex intermediate",
                "Start": m.start() + 1,
                "End": m.end(),
                "Length": len(motif_seq),
                "Sequence": wrap(motif_seq),
                "Score": float(score),
                "G_Run_Count": len(g_runs),
                "G_Content": round(g_content, 3),
                "Conservation_Score": float(conservation_result["enrichment_score"]),
                "Arms/Repeat Unit/Copies": "",
                "Spacer": ""
            })
    return results